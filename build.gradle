plugins {
    id "java"
    id "java-library"
    id "jacoco"
    id "io.freefair.lombok" version "5.2.1"
}

allprojects {

    apply plugin: "java"
    apply plugin: "io.freefair.lombok"

    group = "com.pebblepost"
    version = "1.0.0-SNAPSHOT"

    repositories {
        jcenter()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    lombok {
        version = project.property("org.projectlombok.version")
        generateLombokConfig.enabled = false
    }

    if (hasProperty("buildScan")) {
        buildScan {
            termsOfServiceUrl = "https://gradle.com/terms-of-service"
            termsOfServiceAgree = "yes"
        }
    }

}

subprojects {

    apply plugin: "jacoco"

    dependencies {
        implementation("ch.qos.logback:logback-classic:1.2.3")
        testImplementation(
                "org.junit.jupiter:junit-jupiter-api:${project.property("org.junit.jupiter.version")}",
                "org.junit.jupiter:junit-jupiter-engine:${project.property("org.junit.jupiter.version")}",
                "org.junit.platform:junit-platform-engine:${project.property("org.junit.platform.version")}",
                "org.assertj:assertj-core:3.18.0"
        )
    }

    java {
        modularity.inferModulePath = true
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }

}

sourceSets {
    main {
        resources {
            srcDirs += "${rootProject.projectDir}/modules/resources"
        }
    }
}

tasks.register("codeCoverageReport", JacocoReport) {

    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}

build.finalizedBy(codeCoverageReport);
